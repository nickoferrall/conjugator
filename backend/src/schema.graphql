# import BestStreakWhereInput, BestStreakOrderByInput, DailyTargetWhereInput, DailyTargetOrderByInput, SettingWhereInput, SettingOrderByInput, FeedbackOrderByInput, FeedbackWhereInput, UserOrderByInput, VerbOrderByInput, LogOrderByInput, VerbWhereInput, LogWhereInput from './generated/prisma.graphql'

type Query {
  users(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
    where: UserWhereInput
  ): [User!]!
  me: User!
  myLogs(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: LogOrderByInput
    where: LogWhereInput
  ): [Log!]!
  verbs(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: VerbOrderByInput
    where: VerbWhereInput
  ): [Verb]
  logs(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: LogOrderByInput
    where: LogWhereInput
  ): [Log!]!
  feedbacks(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: FeedbackOrderByInput
    where: FeedbackWhereInput
  ): [Feedback!]!
  settings(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: SettingOrderByInput
    where: SettingWhereInput
  ): [Setting!]!
  dailyTargets(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: DailyTargetOrderByInput
    where: DailyTargetWhereInput
  ): [DailyTarget!]!
  bestStreaks(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: BestStreakOrderByInput
    where: BestStreakWhereInput
  ): [BestStreak!]!
  monthCorrectCount: Int
  todayCorrectCount: Int
}

type Mutation {
  cancelSubscription(data: String!): String
  createBestStreak(data: CreateBestStreakInput!): BestStreak!
  createDailyTarget(data: CreateDailyTargetInput!): DailyTarget!
  createFeedback(data: CreateFeedbackInput!): Feedback!
  createFrenchVerb(data: VerbCreateInput!): FrenchVerb!
  createLog(data: CreateLogInput!): Log!
  createUser(data: CreateUserInput!): AuthPayload!
  createVerb(data: VerbCreateInput!): Verb!
  deleteUser: User!
  fiftyPercentDiscount(data: String!): String
  forgotPassword(data: String!): String
  login(data: LoginUserInput!): AuthPayload!
  monthFreeDiscount(data: String!): String
  updateDailyTarget(data: UpdateDailyTarget!): DailyTarget!
  updateUser(data: UpdateUserInput!): User!
  updateVerb(data: VerbUpdateInput!): Verb!
  upsertSetting(data: UpsertSettingInput!): Setting!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  premium: Boolean!
  stripeSource: String
  stripeSubId: String
  successfulPromo: Boolean!
}

input UpdateUserInput {
  email: String
  id: ID!
  name: String
  password: String
  premium: Boolean
}

input CreateBestStreakInput {
  streak: Int!
}

input CreateDailyTargetInput {
  target: Int!
}

input UpdateDailyTarget {
  target: Int!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateLogInput {
  verbInfinitive: String!
  tense: String!
  correctAnswer: String!
  userAnswer: String!
  verbPerson: String!
  correct: Boolean!
}

input CreateFeedbackInput {
  email: String!
  text: String!
}

input UpsertSettingInput {
  difficulty: Int!
  latam: Boolean!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  presentPerfect: Boolean!
  futurePerfect: Boolean!
  pastPerfect: Boolean!
  conditionalPerfect: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  subjPresentPerfect: Boolean!
}

input VerbCreateInput {
  start: Int
  end: Int
}

input VerbUpdateInput {
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  gerundEnglish: String
  infinitive: String
  infinitiveEnglish: String
  mood: String
  moodEnglish: String
  pastparticiple: String
  pastparticipleEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

# input FrenchVerbUpdateInput {
#   form1p: String
#   form1s: String
#   form2p: String
#   form2s: String
#   form3p: String
#   form3s: String
#   gerund: String
#   infinitive: String
#   moodEnglish: String
#   tense: String
#   tenseEnglish: String
#   verbEnglish: String
# }

type User {
  id: ID!
  email: String
  feedbacks: [Feedback]
  setting: Setting
  logs: [Log]
  name: String!
  bestStreak: BestStreak
  dailyTarget: DailyTarget
  password: String!
  premium: Boolean!
  stripeSource: String
  stripeSubId: String
  successfulPromo: Boolean
  updatedAt: String!
  createdAt: String!
}

type DailyTarget {
  id: ID!
  target: Int!
  user: User
  updatedAt: String!
  createdAt: String!
}

type BestStreak {
  id: ID!
  streak: Int!
  user: User
  updatedAt: String!
  createdAt: String!
}

type Feedback {
  id: ID!
  email: String!
  text: String!
  user: User
  updatedAt: String!
  createdAt: String!
}

type Log {
  id: ID!
  verbInfinitive: String!
  tense: String!
  correctAnswer: String!
  userAnswer: String!
  verbPerson: String!
  correct: Boolean!
  user: User
  updatedAt: String!
  createdAt: String!
}

type Setting {
  id: ID!
  difficulty: Int!
  latam: Boolean!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  presentPerfect: Boolean!
  futurePerfect: Boolean!
  pastPerfect: Boolean!
  conditionalPerfect: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  subjPresentPerfect: Boolean!
  user: User!
  updatedAt: String!
  createdAt: String!
}

type Verb {
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  gerundEnglish: String
  index: ID
  infinitive: String
  infinitiveEnglish: String
  mood: String
  moodEnglish: String
  pastparticiple: String
  pastparticipleEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

type FrenchVerb {
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  gerundEnglish: String
  index: ID
  infinitive: String
  infinitiveEnglish: String
  mood: String
  moodEnglish: String
  pastparticiple: String
  pastparticipleEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}


input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: String
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
