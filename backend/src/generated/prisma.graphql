# source: http://localhost:4466
# timestamp: Tue Dec 31 2019 17:15:55 GMT+0000 (Greenwich Mean Time)

type AggregateBestStreak {
  count: Int!
}

type AggregateDailyTarget {
  count: Int!
}

type AggregateFeedback {
  count: Int!
}

type AggregateFrenchSetting {
  count: Int!
}

type AggregateFrenchVerb {
  count: Int!
}

type AggregateLog {
  count: Int!
}

type AggregateSetting {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVerb {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type BestStreak implements Node {
  id: ID!
  streak: Int!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BestStreakConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BestStreakEdge]!
  aggregate: AggregateBestStreak!
}

input BestStreakCreateInput {
  id: ID
  streak: Int!
  user: UserCreateOneWithoutBestStreakInput
}

input BestStreakCreateOneWithoutUserInput {
  create: BestStreakCreateWithoutUserInput
  connect: BestStreakWhereUniqueInput
}

input BestStreakCreateWithoutUserInput {
  id: ID
  streak: Int!
}

"""An edge in a connection."""
type BestStreakEdge {
  """The item at the end of the edge."""
  node: BestStreak!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BestStreakOrderByInput {
  id_ASC
  id_DESC
  streak_ASC
  streak_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BestStreakPreviousValues {
  id: ID!
  streak: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BestStreakSubscriptionPayload {
  mutation: MutationType!
  node: BestStreak
  updatedFields: [String!]
  previousValues: BestStreakPreviousValues
}

input BestStreakSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BestStreakSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BestStreakSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BestStreakSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BestStreakWhereInput
}

input BestStreakUpdateInput {
  streak: Int
  user: UserUpdateOneWithoutBestStreakInput
}

input BestStreakUpdateManyMutationInput {
  streak: Int
}

input BestStreakUpdateOneWithoutUserInput {
  create: BestStreakCreateWithoutUserInput
  connect: BestStreakWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BestStreakUpdateWithoutUserDataInput
  upsert: BestStreakUpsertWithoutUserInput
}

input BestStreakUpdateWithoutUserDataInput {
  streak: Int
}

input BestStreakUpsertWithoutUserInput {
  update: BestStreakUpdateWithoutUserDataInput!
  create: BestStreakCreateWithoutUserInput!
}

input BestStreakWhereInput {
  """Logical AND on all given filters."""
  AND: [BestStreakWhereInput!]

  """Logical OR on all given filters."""
  OR: [BestStreakWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BestStreakWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  streak: Int

  """All values that are not equal to given value."""
  streak_not: Int

  """All values that are contained in given list."""
  streak_in: [Int!]

  """All values that are not contained in given list."""
  streak_not_in: [Int!]

  """All values less than the given value."""
  streak_lt: Int

  """All values less than or equal the given value."""
  streak_lte: Int

  """All values greater than the given value."""
  streak_gt: Int

  """All values greater than or equal the given value."""
  streak_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input BestStreakWhereUniqueInput {
  id: ID
}

type DailyTarget implements Node {
  id: ID!
  target: Int!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DailyTargetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DailyTargetEdge]!
  aggregate: AggregateDailyTarget!
}

input DailyTargetCreateInput {
  id: ID
  target: Int!
  user: UserCreateOneWithoutDailyTargetInput
}

input DailyTargetCreateOneWithoutUserInput {
  create: DailyTargetCreateWithoutUserInput
  connect: DailyTargetWhereUniqueInput
}

input DailyTargetCreateWithoutUserInput {
  id: ID
  target: Int!
}

"""An edge in a connection."""
type DailyTargetEdge {
  """The item at the end of the edge."""
  node: DailyTarget!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DailyTargetOrderByInput {
  id_ASC
  id_DESC
  target_ASC
  target_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DailyTargetPreviousValues {
  id: ID!
  target: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DailyTargetSubscriptionPayload {
  mutation: MutationType!
  node: DailyTarget
  updatedFields: [String!]
  previousValues: DailyTargetPreviousValues
}

input DailyTargetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DailyTargetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DailyTargetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DailyTargetSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DailyTargetWhereInput
}

input DailyTargetUpdateInput {
  target: Int
  user: UserUpdateOneWithoutDailyTargetInput
}

input DailyTargetUpdateManyMutationInput {
  target: Int
}

input DailyTargetUpdateOneWithoutUserInput {
  create: DailyTargetCreateWithoutUserInput
  connect: DailyTargetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DailyTargetUpdateWithoutUserDataInput
  upsert: DailyTargetUpsertWithoutUserInput
}

input DailyTargetUpdateWithoutUserDataInput {
  target: Int
}

input DailyTargetUpsertWithoutUserInput {
  update: DailyTargetUpdateWithoutUserDataInput!
  create: DailyTargetCreateWithoutUserInput!
}

input DailyTargetWhereInput {
  """Logical AND on all given filters."""
  AND: [DailyTargetWhereInput!]

  """Logical OR on all given filters."""
  OR: [DailyTargetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DailyTargetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  target: Int

  """All values that are not equal to given value."""
  target_not: Int

  """All values that are contained in given list."""
  target_in: [Int!]

  """All values that are not contained in given list."""
  target_not_in: [Int!]

  """All values less than the given value."""
  target_lt: Int

  """All values less than or equal the given value."""
  target_lte: Int

  """All values greater than the given value."""
  target_gt: Int

  """All values greater than or equal the given value."""
  target_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input DailyTargetWhereUniqueInput {
  id: ID
}

scalar DateTime

type Feedback implements Node {
  id: ID!
  email: String!
  user: User
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FeedbackConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeedbackEdge]!
  aggregate: AggregateFeedback!
}

input FeedbackCreateInput {
  id: ID
  email: String!
  text: String!
  user: UserCreateOneWithoutFeedbacksInput
}

input FeedbackCreateManyWithoutUserInput {
  create: [FeedbackCreateWithoutUserInput!]
  connect: [FeedbackWhereUniqueInput!]
}

input FeedbackCreateWithoutUserInput {
  id: ID
  email: String!
  text: String!
}

"""An edge in a connection."""
type FeedbackEdge {
  """The item at the end of the edge."""
  node: Feedback!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FeedbackOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FeedbackPreviousValues {
  id: ID!
  email: String!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FeedbackScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedbackScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedbackScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedbackScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type FeedbackSubscriptionPayload {
  mutation: MutationType!
  node: Feedback
  updatedFields: [String!]
  previousValues: FeedbackPreviousValues
}

input FeedbackSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedbackSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedbackSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedbackSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FeedbackWhereInput
}

input FeedbackUpdateInput {
  email: String
  text: String
  user: UserUpdateOneWithoutFeedbacksInput
}

input FeedbackUpdateManyDataInput {
  email: String
  text: String
}

input FeedbackUpdateManyMutationInput {
  email: String
  text: String
}

input FeedbackUpdateManyWithoutUserInput {
  create: [FeedbackCreateWithoutUserInput!]
  connect: [FeedbackWhereUniqueInput!]
  set: [FeedbackWhereUniqueInput!]
  disconnect: [FeedbackWhereUniqueInput!]
  delete: [FeedbackWhereUniqueInput!]
  update: [FeedbackUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [FeedbackUpdateManyWithWhereNestedInput!]
  deleteMany: [FeedbackScalarWhereInput!]
  upsert: [FeedbackUpsertWithWhereUniqueWithoutUserInput!]
}

input FeedbackUpdateManyWithWhereNestedInput {
  where: FeedbackScalarWhereInput!
  data: FeedbackUpdateManyDataInput!
}

input FeedbackUpdateWithoutUserDataInput {
  email: String
  text: String
}

input FeedbackUpdateWithWhereUniqueWithoutUserInput {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateWithoutUserDataInput!
}

input FeedbackUpsertWithWhereUniqueWithoutUserInput {
  where: FeedbackWhereUniqueInput!
  update: FeedbackUpdateWithoutUserDataInput!
  create: FeedbackCreateWithoutUserInput!
}

input FeedbackWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedbackWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedbackWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedbackWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input FeedbackWhereUniqueInput {
  id: ID
}

type FrenchSetting implements Node {
  id: ID!
  difficulty: Int!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FrenchSettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FrenchSettingEdge]!
  aggregate: AggregateFrenchSetting!
}

input FrenchSettingCreateInput {
  id: ID
  difficulty: Int!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  user: UserCreateOneWithoutFrenchSettingInput!
}

input FrenchSettingCreateOneWithoutUserInput {
  create: FrenchSettingCreateWithoutUserInput
  connect: FrenchSettingWhereUniqueInput
}

input FrenchSettingCreateWithoutUserInput {
  id: ID
  difficulty: Int!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
}

"""An edge in a connection."""
type FrenchSettingEdge {
  """The item at the end of the edge."""
  node: FrenchSetting!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FrenchSettingOrderByInput {
  id_ASC
  id_DESC
  difficulty_ASC
  difficulty_DESC
  present_ASC
  present_DESC
  preterite_ASC
  preterite_DESC
  imperfect_ASC
  imperfect_DESC
  future_ASC
  future_DESC
  conditional_ASC
  conditional_DESC
  subjPresent_ASC
  subjPresent_DESC
  subjImperfect_ASC
  subjImperfect_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FrenchSettingPreviousValues {
  id: ID!
  difficulty: Int!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FrenchSettingSubscriptionPayload {
  mutation: MutationType!
  node: FrenchSetting
  updatedFields: [String!]
  previousValues: FrenchSettingPreviousValues
}

input FrenchSettingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FrenchSettingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FrenchSettingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FrenchSettingSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FrenchSettingWhereInput
}

input FrenchSettingUpdateInput {
  difficulty: Int
  present: Boolean
  preterite: Boolean
  imperfect: Boolean
  future: Boolean
  conditional: Boolean
  subjPresent: Boolean
  subjImperfect: Boolean
  user: UserUpdateOneRequiredWithoutFrenchSettingInput
}

input FrenchSettingUpdateManyMutationInput {
  difficulty: Int
  present: Boolean
  preterite: Boolean
  imperfect: Boolean
  future: Boolean
  conditional: Boolean
  subjPresent: Boolean
  subjImperfect: Boolean
}

input FrenchSettingUpdateOneWithoutUserInput {
  create: FrenchSettingCreateWithoutUserInput
  connect: FrenchSettingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FrenchSettingUpdateWithoutUserDataInput
  upsert: FrenchSettingUpsertWithoutUserInput
}

input FrenchSettingUpdateWithoutUserDataInput {
  difficulty: Int
  present: Boolean
  preterite: Boolean
  imperfect: Boolean
  future: Boolean
  conditional: Boolean
  subjPresent: Boolean
  subjImperfect: Boolean
}

input FrenchSettingUpsertWithoutUserInput {
  update: FrenchSettingUpdateWithoutUserDataInput!
  create: FrenchSettingCreateWithoutUserInput!
}

input FrenchSettingWhereInput {
  """Logical AND on all given filters."""
  AND: [FrenchSettingWhereInput!]

  """Logical OR on all given filters."""
  OR: [FrenchSettingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FrenchSettingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  difficulty: Int

  """All values that are not equal to given value."""
  difficulty_not: Int

  """All values that are contained in given list."""
  difficulty_in: [Int!]

  """All values that are not contained in given list."""
  difficulty_not_in: [Int!]

  """All values less than the given value."""
  difficulty_lt: Int

  """All values less than or equal the given value."""
  difficulty_lte: Int

  """All values greater than the given value."""
  difficulty_gt: Int

  """All values greater than or equal the given value."""
  difficulty_gte: Int
  present: Boolean

  """All values that are not equal to given value."""
  present_not: Boolean
  preterite: Boolean

  """All values that are not equal to given value."""
  preterite_not: Boolean
  imperfect: Boolean

  """All values that are not equal to given value."""
  imperfect_not: Boolean
  future: Boolean

  """All values that are not equal to given value."""
  future_not: Boolean
  conditional: Boolean

  """All values that are not equal to given value."""
  conditional_not: Boolean
  subjPresent: Boolean

  """All values that are not equal to given value."""
  subjPresent_not: Boolean
  subjImperfect: Boolean

  """All values that are not equal to given value."""
  subjImperfect_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input FrenchSettingWhereUniqueInput {
  id: ID
}

type FrenchVerb implements Node {
  id: ID!
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  infinitive: String
  moodEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

"""A connection to a list of items."""
type FrenchVerbConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FrenchVerbEdge]!
  aggregate: AggregateFrenchVerb!
}

input FrenchVerbCreateInput {
  id: ID
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  infinitive: String
  moodEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

"""An edge in a connection."""
type FrenchVerbEdge {
  """The item at the end of the edge."""
  node: FrenchVerb!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FrenchVerbOrderByInput {
  id_ASC
  id_DESC
  form1p_ASC
  form1p_DESC
  form1s_ASC
  form1s_DESC
  form2p_ASC
  form2p_DESC
  form2s_ASC
  form2s_DESC
  form3p_ASC
  form3p_DESC
  form3s_ASC
  form3s_DESC
  gerund_ASC
  gerund_DESC
  infinitive_ASC
  infinitive_DESC
  moodEnglish_ASC
  moodEnglish_DESC
  tense_ASC
  tense_DESC
  tenseEnglish_ASC
  tenseEnglish_DESC
  verbEnglish_ASC
  verbEnglish_DESC
}

type FrenchVerbPreviousValues {
  id: ID!
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  infinitive: String
  moodEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

type FrenchVerbSubscriptionPayload {
  mutation: MutationType!
  node: FrenchVerb
  updatedFields: [String!]
  previousValues: FrenchVerbPreviousValues
}

input FrenchVerbSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FrenchVerbSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FrenchVerbSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FrenchVerbSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FrenchVerbWhereInput
}

input FrenchVerbUpdateInput {
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  infinitive: String
  moodEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

input FrenchVerbUpdateManyMutationInput {
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  infinitive: String
  moodEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

input FrenchVerbWhereInput {
  """Logical AND on all given filters."""
  AND: [FrenchVerbWhereInput!]

  """Logical OR on all given filters."""
  OR: [FrenchVerbWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FrenchVerbWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  form1p: String

  """All values that are not equal to given value."""
  form1p_not: String

  """All values that are contained in given list."""
  form1p_in: [String!]

  """All values that are not contained in given list."""
  form1p_not_in: [String!]

  """All values less than the given value."""
  form1p_lt: String

  """All values less than or equal the given value."""
  form1p_lte: String

  """All values greater than the given value."""
  form1p_gt: String

  """All values greater than or equal the given value."""
  form1p_gte: String

  """All values containing the given string."""
  form1p_contains: String

  """All values not containing the given string."""
  form1p_not_contains: String

  """All values starting with the given string."""
  form1p_starts_with: String

  """All values not starting with the given string."""
  form1p_not_starts_with: String

  """All values ending with the given string."""
  form1p_ends_with: String

  """All values not ending with the given string."""
  form1p_not_ends_with: String
  form1s: String

  """All values that are not equal to given value."""
  form1s_not: String

  """All values that are contained in given list."""
  form1s_in: [String!]

  """All values that are not contained in given list."""
  form1s_not_in: [String!]

  """All values less than the given value."""
  form1s_lt: String

  """All values less than or equal the given value."""
  form1s_lte: String

  """All values greater than the given value."""
  form1s_gt: String

  """All values greater than or equal the given value."""
  form1s_gte: String

  """All values containing the given string."""
  form1s_contains: String

  """All values not containing the given string."""
  form1s_not_contains: String

  """All values starting with the given string."""
  form1s_starts_with: String

  """All values not starting with the given string."""
  form1s_not_starts_with: String

  """All values ending with the given string."""
  form1s_ends_with: String

  """All values not ending with the given string."""
  form1s_not_ends_with: String
  form2p: String

  """All values that are not equal to given value."""
  form2p_not: String

  """All values that are contained in given list."""
  form2p_in: [String!]

  """All values that are not contained in given list."""
  form2p_not_in: [String!]

  """All values less than the given value."""
  form2p_lt: String

  """All values less than or equal the given value."""
  form2p_lte: String

  """All values greater than the given value."""
  form2p_gt: String

  """All values greater than or equal the given value."""
  form2p_gte: String

  """All values containing the given string."""
  form2p_contains: String

  """All values not containing the given string."""
  form2p_not_contains: String

  """All values starting with the given string."""
  form2p_starts_with: String

  """All values not starting with the given string."""
  form2p_not_starts_with: String

  """All values ending with the given string."""
  form2p_ends_with: String

  """All values not ending with the given string."""
  form2p_not_ends_with: String
  form2s: String

  """All values that are not equal to given value."""
  form2s_not: String

  """All values that are contained in given list."""
  form2s_in: [String!]

  """All values that are not contained in given list."""
  form2s_not_in: [String!]

  """All values less than the given value."""
  form2s_lt: String

  """All values less than or equal the given value."""
  form2s_lte: String

  """All values greater than the given value."""
  form2s_gt: String

  """All values greater than or equal the given value."""
  form2s_gte: String

  """All values containing the given string."""
  form2s_contains: String

  """All values not containing the given string."""
  form2s_not_contains: String

  """All values starting with the given string."""
  form2s_starts_with: String

  """All values not starting with the given string."""
  form2s_not_starts_with: String

  """All values ending with the given string."""
  form2s_ends_with: String

  """All values not ending with the given string."""
  form2s_not_ends_with: String
  form3p: String

  """All values that are not equal to given value."""
  form3p_not: String

  """All values that are contained in given list."""
  form3p_in: [String!]

  """All values that are not contained in given list."""
  form3p_not_in: [String!]

  """All values less than the given value."""
  form3p_lt: String

  """All values less than or equal the given value."""
  form3p_lte: String

  """All values greater than the given value."""
  form3p_gt: String

  """All values greater than or equal the given value."""
  form3p_gte: String

  """All values containing the given string."""
  form3p_contains: String

  """All values not containing the given string."""
  form3p_not_contains: String

  """All values starting with the given string."""
  form3p_starts_with: String

  """All values not starting with the given string."""
  form3p_not_starts_with: String

  """All values ending with the given string."""
  form3p_ends_with: String

  """All values not ending with the given string."""
  form3p_not_ends_with: String
  form3s: String

  """All values that are not equal to given value."""
  form3s_not: String

  """All values that are contained in given list."""
  form3s_in: [String!]

  """All values that are not contained in given list."""
  form3s_not_in: [String!]

  """All values less than the given value."""
  form3s_lt: String

  """All values less than or equal the given value."""
  form3s_lte: String

  """All values greater than the given value."""
  form3s_gt: String

  """All values greater than or equal the given value."""
  form3s_gte: String

  """All values containing the given string."""
  form3s_contains: String

  """All values not containing the given string."""
  form3s_not_contains: String

  """All values starting with the given string."""
  form3s_starts_with: String

  """All values not starting with the given string."""
  form3s_not_starts_with: String

  """All values ending with the given string."""
  form3s_ends_with: String

  """All values not ending with the given string."""
  form3s_not_ends_with: String
  gerund: String

  """All values that are not equal to given value."""
  gerund_not: String

  """All values that are contained in given list."""
  gerund_in: [String!]

  """All values that are not contained in given list."""
  gerund_not_in: [String!]

  """All values less than the given value."""
  gerund_lt: String

  """All values less than or equal the given value."""
  gerund_lte: String

  """All values greater than the given value."""
  gerund_gt: String

  """All values greater than or equal the given value."""
  gerund_gte: String

  """All values containing the given string."""
  gerund_contains: String

  """All values not containing the given string."""
  gerund_not_contains: String

  """All values starting with the given string."""
  gerund_starts_with: String

  """All values not starting with the given string."""
  gerund_not_starts_with: String

  """All values ending with the given string."""
  gerund_ends_with: String

  """All values not ending with the given string."""
  gerund_not_ends_with: String
  infinitive: String

  """All values that are not equal to given value."""
  infinitive_not: String

  """All values that are contained in given list."""
  infinitive_in: [String!]

  """All values that are not contained in given list."""
  infinitive_not_in: [String!]

  """All values less than the given value."""
  infinitive_lt: String

  """All values less than or equal the given value."""
  infinitive_lte: String

  """All values greater than the given value."""
  infinitive_gt: String

  """All values greater than or equal the given value."""
  infinitive_gte: String

  """All values containing the given string."""
  infinitive_contains: String

  """All values not containing the given string."""
  infinitive_not_contains: String

  """All values starting with the given string."""
  infinitive_starts_with: String

  """All values not starting with the given string."""
  infinitive_not_starts_with: String

  """All values ending with the given string."""
  infinitive_ends_with: String

  """All values not ending with the given string."""
  infinitive_not_ends_with: String
  moodEnglish: String

  """All values that are not equal to given value."""
  moodEnglish_not: String

  """All values that are contained in given list."""
  moodEnglish_in: [String!]

  """All values that are not contained in given list."""
  moodEnglish_not_in: [String!]

  """All values less than the given value."""
  moodEnglish_lt: String

  """All values less than or equal the given value."""
  moodEnglish_lte: String

  """All values greater than the given value."""
  moodEnglish_gt: String

  """All values greater than or equal the given value."""
  moodEnglish_gte: String

  """All values containing the given string."""
  moodEnglish_contains: String

  """All values not containing the given string."""
  moodEnglish_not_contains: String

  """All values starting with the given string."""
  moodEnglish_starts_with: String

  """All values not starting with the given string."""
  moodEnglish_not_starts_with: String

  """All values ending with the given string."""
  moodEnglish_ends_with: String

  """All values not ending with the given string."""
  moodEnglish_not_ends_with: String
  tense: String

  """All values that are not equal to given value."""
  tense_not: String

  """All values that are contained in given list."""
  tense_in: [String!]

  """All values that are not contained in given list."""
  tense_not_in: [String!]

  """All values less than the given value."""
  tense_lt: String

  """All values less than or equal the given value."""
  tense_lte: String

  """All values greater than the given value."""
  tense_gt: String

  """All values greater than or equal the given value."""
  tense_gte: String

  """All values containing the given string."""
  tense_contains: String

  """All values not containing the given string."""
  tense_not_contains: String

  """All values starting with the given string."""
  tense_starts_with: String

  """All values not starting with the given string."""
  tense_not_starts_with: String

  """All values ending with the given string."""
  tense_ends_with: String

  """All values not ending with the given string."""
  tense_not_ends_with: String
  tenseEnglish: String

  """All values that are not equal to given value."""
  tenseEnglish_not: String

  """All values that are contained in given list."""
  tenseEnglish_in: [String!]

  """All values that are not contained in given list."""
  tenseEnglish_not_in: [String!]

  """All values less than the given value."""
  tenseEnglish_lt: String

  """All values less than or equal the given value."""
  tenseEnglish_lte: String

  """All values greater than the given value."""
  tenseEnglish_gt: String

  """All values greater than or equal the given value."""
  tenseEnglish_gte: String

  """All values containing the given string."""
  tenseEnglish_contains: String

  """All values not containing the given string."""
  tenseEnglish_not_contains: String

  """All values starting with the given string."""
  tenseEnglish_starts_with: String

  """All values not starting with the given string."""
  tenseEnglish_not_starts_with: String

  """All values ending with the given string."""
  tenseEnglish_ends_with: String

  """All values not ending with the given string."""
  tenseEnglish_not_ends_with: String
  verbEnglish: String

  """All values that are not equal to given value."""
  verbEnglish_not: String

  """All values that are contained in given list."""
  verbEnglish_in: [String!]

  """All values that are not contained in given list."""
  verbEnglish_not_in: [String!]

  """All values less than the given value."""
  verbEnglish_lt: String

  """All values less than or equal the given value."""
  verbEnglish_lte: String

  """All values greater than the given value."""
  verbEnglish_gt: String

  """All values greater than or equal the given value."""
  verbEnglish_gte: String

  """All values containing the given string."""
  verbEnglish_contains: String

  """All values not containing the given string."""
  verbEnglish_not_contains: String

  """All values starting with the given string."""
  verbEnglish_starts_with: String

  """All values not starting with the given string."""
  verbEnglish_not_starts_with: String

  """All values ending with the given string."""
  verbEnglish_ends_with: String

  """All values not ending with the given string."""
  verbEnglish_not_ends_with: String
}

input FrenchVerbWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type Log implements Node {
  id: ID!
  correct: Boolean!
  correctAnswer: String!
  tense: String!
  userAnswer: String!
  verbInfinitive: String!
  verbPerson: String!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type LogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LogEdge]!
  aggregate: AggregateLog!
}

input LogCreateInput {
  id: ID
  correct: Boolean!
  correctAnswer: String!
  tense: String!
  userAnswer: String!
  verbInfinitive: String!
  verbPerson: String!
  user: UserCreateOneWithoutLogsInput
}

input LogCreateManyWithoutUserInput {
  create: [LogCreateWithoutUserInput!]
  connect: [LogWhereUniqueInput!]
}

input LogCreateWithoutUserInput {
  id: ID
  correct: Boolean!
  correctAnswer: String!
  tense: String!
  userAnswer: String!
  verbInfinitive: String!
  verbPerson: String!
}

"""An edge in a connection."""
type LogEdge {
  """The item at the end of the edge."""
  node: Log!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LogOrderByInput {
  id_ASC
  id_DESC
  correct_ASC
  correct_DESC
  correctAnswer_ASC
  correctAnswer_DESC
  tense_ASC
  tense_DESC
  userAnswer_ASC
  userAnswer_DESC
  verbInfinitive_ASC
  verbInfinitive_DESC
  verbPerson_ASC
  verbPerson_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LogPreviousValues {
  id: ID!
  correct: Boolean!
  correctAnswer: String!
  tense: String!
  userAnswer: String!
  verbInfinitive: String!
  verbPerson: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LogScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LogScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  correct: Boolean

  """All values that are not equal to given value."""
  correct_not: Boolean
  correctAnswer: String

  """All values that are not equal to given value."""
  correctAnswer_not: String

  """All values that are contained in given list."""
  correctAnswer_in: [String!]

  """All values that are not contained in given list."""
  correctAnswer_not_in: [String!]

  """All values less than the given value."""
  correctAnswer_lt: String

  """All values less than or equal the given value."""
  correctAnswer_lte: String

  """All values greater than the given value."""
  correctAnswer_gt: String

  """All values greater than or equal the given value."""
  correctAnswer_gte: String

  """All values containing the given string."""
  correctAnswer_contains: String

  """All values not containing the given string."""
  correctAnswer_not_contains: String

  """All values starting with the given string."""
  correctAnswer_starts_with: String

  """All values not starting with the given string."""
  correctAnswer_not_starts_with: String

  """All values ending with the given string."""
  correctAnswer_ends_with: String

  """All values not ending with the given string."""
  correctAnswer_not_ends_with: String
  tense: String

  """All values that are not equal to given value."""
  tense_not: String

  """All values that are contained in given list."""
  tense_in: [String!]

  """All values that are not contained in given list."""
  tense_not_in: [String!]

  """All values less than the given value."""
  tense_lt: String

  """All values less than or equal the given value."""
  tense_lte: String

  """All values greater than the given value."""
  tense_gt: String

  """All values greater than or equal the given value."""
  tense_gte: String

  """All values containing the given string."""
  tense_contains: String

  """All values not containing the given string."""
  tense_not_contains: String

  """All values starting with the given string."""
  tense_starts_with: String

  """All values not starting with the given string."""
  tense_not_starts_with: String

  """All values ending with the given string."""
  tense_ends_with: String

  """All values not ending with the given string."""
  tense_not_ends_with: String
  userAnswer: String

  """All values that are not equal to given value."""
  userAnswer_not: String

  """All values that are contained in given list."""
  userAnswer_in: [String!]

  """All values that are not contained in given list."""
  userAnswer_not_in: [String!]

  """All values less than the given value."""
  userAnswer_lt: String

  """All values less than or equal the given value."""
  userAnswer_lte: String

  """All values greater than the given value."""
  userAnswer_gt: String

  """All values greater than or equal the given value."""
  userAnswer_gte: String

  """All values containing the given string."""
  userAnswer_contains: String

  """All values not containing the given string."""
  userAnswer_not_contains: String

  """All values starting with the given string."""
  userAnswer_starts_with: String

  """All values not starting with the given string."""
  userAnswer_not_starts_with: String

  """All values ending with the given string."""
  userAnswer_ends_with: String

  """All values not ending with the given string."""
  userAnswer_not_ends_with: String
  verbInfinitive: String

  """All values that are not equal to given value."""
  verbInfinitive_not: String

  """All values that are contained in given list."""
  verbInfinitive_in: [String!]

  """All values that are not contained in given list."""
  verbInfinitive_not_in: [String!]

  """All values less than the given value."""
  verbInfinitive_lt: String

  """All values less than or equal the given value."""
  verbInfinitive_lte: String

  """All values greater than the given value."""
  verbInfinitive_gt: String

  """All values greater than or equal the given value."""
  verbInfinitive_gte: String

  """All values containing the given string."""
  verbInfinitive_contains: String

  """All values not containing the given string."""
  verbInfinitive_not_contains: String

  """All values starting with the given string."""
  verbInfinitive_starts_with: String

  """All values not starting with the given string."""
  verbInfinitive_not_starts_with: String

  """All values ending with the given string."""
  verbInfinitive_ends_with: String

  """All values not ending with the given string."""
  verbInfinitive_not_ends_with: String
  verbPerson: String

  """All values that are not equal to given value."""
  verbPerson_not: String

  """All values that are contained in given list."""
  verbPerson_in: [String!]

  """All values that are not contained in given list."""
  verbPerson_not_in: [String!]

  """All values less than the given value."""
  verbPerson_lt: String

  """All values less than or equal the given value."""
  verbPerson_lte: String

  """All values greater than the given value."""
  verbPerson_gt: String

  """All values greater than or equal the given value."""
  verbPerson_gte: String

  """All values containing the given string."""
  verbPerson_contains: String

  """All values not containing the given string."""
  verbPerson_not_contains: String

  """All values starting with the given string."""
  verbPerson_starts_with: String

  """All values not starting with the given string."""
  verbPerson_not_starts_with: String

  """All values ending with the given string."""
  verbPerson_ends_with: String

  """All values not ending with the given string."""
  verbPerson_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type LogSubscriptionPayload {
  mutation: MutationType!
  node: Log
  updatedFields: [String!]
  previousValues: LogPreviousValues
}

input LogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LogWhereInput
}

input LogUpdateInput {
  correct: Boolean
  correctAnswer: String
  tense: String
  userAnswer: String
  verbInfinitive: String
  verbPerson: String
  user: UserUpdateOneWithoutLogsInput
}

input LogUpdateManyDataInput {
  correct: Boolean
  correctAnswer: String
  tense: String
  userAnswer: String
  verbInfinitive: String
  verbPerson: String
}

input LogUpdateManyMutationInput {
  correct: Boolean
  correctAnswer: String
  tense: String
  userAnswer: String
  verbInfinitive: String
  verbPerson: String
}

input LogUpdateManyWithoutUserInput {
  create: [LogCreateWithoutUserInput!]
  connect: [LogWhereUniqueInput!]
  set: [LogWhereUniqueInput!]
  disconnect: [LogWhereUniqueInput!]
  delete: [LogWhereUniqueInput!]
  update: [LogUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LogUpdateManyWithWhereNestedInput!]
  deleteMany: [LogScalarWhereInput!]
  upsert: [LogUpsertWithWhereUniqueWithoutUserInput!]
}

input LogUpdateManyWithWhereNestedInput {
  where: LogScalarWhereInput!
  data: LogUpdateManyDataInput!
}

input LogUpdateWithoutUserDataInput {
  correct: Boolean
  correctAnswer: String
  tense: String
  userAnswer: String
  verbInfinitive: String
  verbPerson: String
}

input LogUpdateWithWhereUniqueWithoutUserInput {
  where: LogWhereUniqueInput!
  data: LogUpdateWithoutUserDataInput!
}

input LogUpsertWithWhereUniqueWithoutUserInput {
  where: LogWhereUniqueInput!
  update: LogUpdateWithoutUserDataInput!
  create: LogCreateWithoutUserInput!
}

input LogWhereInput {
  """Logical AND on all given filters."""
  AND: [LogWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  correct: Boolean

  """All values that are not equal to given value."""
  correct_not: Boolean
  correctAnswer: String

  """All values that are not equal to given value."""
  correctAnswer_not: String

  """All values that are contained in given list."""
  correctAnswer_in: [String!]

  """All values that are not contained in given list."""
  correctAnswer_not_in: [String!]

  """All values less than the given value."""
  correctAnswer_lt: String

  """All values less than or equal the given value."""
  correctAnswer_lte: String

  """All values greater than the given value."""
  correctAnswer_gt: String

  """All values greater than or equal the given value."""
  correctAnswer_gte: String

  """All values containing the given string."""
  correctAnswer_contains: String

  """All values not containing the given string."""
  correctAnswer_not_contains: String

  """All values starting with the given string."""
  correctAnswer_starts_with: String

  """All values not starting with the given string."""
  correctAnswer_not_starts_with: String

  """All values ending with the given string."""
  correctAnswer_ends_with: String

  """All values not ending with the given string."""
  correctAnswer_not_ends_with: String
  tense: String

  """All values that are not equal to given value."""
  tense_not: String

  """All values that are contained in given list."""
  tense_in: [String!]

  """All values that are not contained in given list."""
  tense_not_in: [String!]

  """All values less than the given value."""
  tense_lt: String

  """All values less than or equal the given value."""
  tense_lte: String

  """All values greater than the given value."""
  tense_gt: String

  """All values greater than or equal the given value."""
  tense_gte: String

  """All values containing the given string."""
  tense_contains: String

  """All values not containing the given string."""
  tense_not_contains: String

  """All values starting with the given string."""
  tense_starts_with: String

  """All values not starting with the given string."""
  tense_not_starts_with: String

  """All values ending with the given string."""
  tense_ends_with: String

  """All values not ending with the given string."""
  tense_not_ends_with: String
  userAnswer: String

  """All values that are not equal to given value."""
  userAnswer_not: String

  """All values that are contained in given list."""
  userAnswer_in: [String!]

  """All values that are not contained in given list."""
  userAnswer_not_in: [String!]

  """All values less than the given value."""
  userAnswer_lt: String

  """All values less than or equal the given value."""
  userAnswer_lte: String

  """All values greater than the given value."""
  userAnswer_gt: String

  """All values greater than or equal the given value."""
  userAnswer_gte: String

  """All values containing the given string."""
  userAnswer_contains: String

  """All values not containing the given string."""
  userAnswer_not_contains: String

  """All values starting with the given string."""
  userAnswer_starts_with: String

  """All values not starting with the given string."""
  userAnswer_not_starts_with: String

  """All values ending with the given string."""
  userAnswer_ends_with: String

  """All values not ending with the given string."""
  userAnswer_not_ends_with: String
  verbInfinitive: String

  """All values that are not equal to given value."""
  verbInfinitive_not: String

  """All values that are contained in given list."""
  verbInfinitive_in: [String!]

  """All values that are not contained in given list."""
  verbInfinitive_not_in: [String!]

  """All values less than the given value."""
  verbInfinitive_lt: String

  """All values less than or equal the given value."""
  verbInfinitive_lte: String

  """All values greater than the given value."""
  verbInfinitive_gt: String

  """All values greater than or equal the given value."""
  verbInfinitive_gte: String

  """All values containing the given string."""
  verbInfinitive_contains: String

  """All values not containing the given string."""
  verbInfinitive_not_contains: String

  """All values starting with the given string."""
  verbInfinitive_starts_with: String

  """All values not starting with the given string."""
  verbInfinitive_not_starts_with: String

  """All values ending with the given string."""
  verbInfinitive_ends_with: String

  """All values not ending with the given string."""
  verbInfinitive_not_ends_with: String
  verbPerson: String

  """All values that are not equal to given value."""
  verbPerson_not: String

  """All values that are contained in given list."""
  verbPerson_in: [String!]

  """All values that are not contained in given list."""
  verbPerson_not_in: [String!]

  """All values less than the given value."""
  verbPerson_lt: String

  """All values less than or equal the given value."""
  verbPerson_lte: String

  """All values greater than the given value."""
  verbPerson_gt: String

  """All values greater than or equal the given value."""
  verbPerson_gte: String

  """All values containing the given string."""
  verbPerson_contains: String

  """All values not containing the given string."""
  verbPerson_not_contains: String

  """All values starting with the given string."""
  verbPerson_starts_with: String

  """All values not starting with the given string."""
  verbPerson_not_starts_with: String

  """All values ending with the given string."""
  verbPerson_ends_with: String

  """All values not ending with the given string."""
  verbPerson_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input LogWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createDailyTarget(data: DailyTargetCreateInput!): DailyTarget!
  createBestStreak(data: BestStreakCreateInput!): BestStreak!
  createLog(data: LogCreateInput!): Log!
  createFeedback(data: FeedbackCreateInput!): Feedback!
  createSetting(data: SettingCreateInput!): Setting!
  createFrenchSetting(data: FrenchSettingCreateInput!): FrenchSetting!
  createVerb(data: VerbCreateInput!): Verb!
  createFrenchVerb(data: FrenchVerbCreateInput!): FrenchVerb!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateDailyTarget(data: DailyTargetUpdateInput!, where: DailyTargetWhereUniqueInput!): DailyTarget
  updateBestStreak(data: BestStreakUpdateInput!, where: BestStreakWhereUniqueInput!): BestStreak
  updateLog(data: LogUpdateInput!, where: LogWhereUniqueInput!): Log
  updateFeedback(data: FeedbackUpdateInput!, where: FeedbackWhereUniqueInput!): Feedback
  updateSetting(data: SettingUpdateInput!, where: SettingWhereUniqueInput!): Setting
  updateFrenchSetting(data: FrenchSettingUpdateInput!, where: FrenchSettingWhereUniqueInput!): FrenchSetting
  updateVerb(data: VerbUpdateInput!, where: VerbWhereUniqueInput!): Verb
  updateFrenchVerb(data: FrenchVerbUpdateInput!, where: FrenchVerbWhereUniqueInput!): FrenchVerb
  deleteUser(where: UserWhereUniqueInput!): User
  deleteDailyTarget(where: DailyTargetWhereUniqueInput!): DailyTarget
  deleteBestStreak(where: BestStreakWhereUniqueInput!): BestStreak
  deleteLog(where: LogWhereUniqueInput!): Log
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteFrenchSetting(where: FrenchSettingWhereUniqueInput!): FrenchSetting
  deleteVerb(where: VerbWhereUniqueInput!): Verb
  deleteFrenchVerb(where: FrenchVerbWhereUniqueInput!): FrenchVerb
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertDailyTarget(where: DailyTargetWhereUniqueInput!, create: DailyTargetCreateInput!, update: DailyTargetUpdateInput!): DailyTarget!
  upsertBestStreak(where: BestStreakWhereUniqueInput!, create: BestStreakCreateInput!, update: BestStreakUpdateInput!): BestStreak!
  upsertLog(where: LogWhereUniqueInput!, create: LogCreateInput!, update: LogUpdateInput!): Log!
  upsertFeedback(where: FeedbackWhereUniqueInput!, create: FeedbackCreateInput!, update: FeedbackUpdateInput!): Feedback!
  upsertSetting(where: SettingWhereUniqueInput!, create: SettingCreateInput!, update: SettingUpdateInput!): Setting!
  upsertFrenchSetting(where: FrenchSettingWhereUniqueInput!, create: FrenchSettingCreateInput!, update: FrenchSettingUpdateInput!): FrenchSetting!
  upsertVerb(where: VerbWhereUniqueInput!, create: VerbCreateInput!, update: VerbUpdateInput!): Verb!
  upsertFrenchVerb(where: FrenchVerbWhereUniqueInput!, create: FrenchVerbCreateInput!, update: FrenchVerbUpdateInput!): FrenchVerb!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyDailyTargets(data: DailyTargetUpdateManyMutationInput!, where: DailyTargetWhereInput): BatchPayload!
  updateManyBestStreaks(data: BestStreakUpdateManyMutationInput!, where: BestStreakWhereInput): BatchPayload!
  updateManyLogs(data: LogUpdateManyMutationInput!, where: LogWhereInput): BatchPayload!
  updateManyFeedbacks(data: FeedbackUpdateManyMutationInput!, where: FeedbackWhereInput): BatchPayload!
  updateManySettings(data: SettingUpdateManyMutationInput!, where: SettingWhereInput): BatchPayload!
  updateManyFrenchSettings(data: FrenchSettingUpdateManyMutationInput!, where: FrenchSettingWhereInput): BatchPayload!
  updateManyVerbs(data: VerbUpdateManyMutationInput!, where: VerbWhereInput): BatchPayload!
  updateManyFrenchVerbs(data: FrenchVerbUpdateManyMutationInput!, where: FrenchVerbWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyDailyTargets(where: DailyTargetWhereInput): BatchPayload!
  deleteManyBestStreaks(where: BestStreakWhereInput): BatchPayload!
  deleteManyLogs(where: LogWhereInput): BatchPayload!
  deleteManyFeedbacks(where: FeedbackWhereInput): BatchPayload!
  deleteManySettings(where: SettingWhereInput): BatchPayload!
  deleteManyFrenchSettings(where: FrenchSettingWhereInput): BatchPayload!
  deleteManyVerbs(where: VerbWhereInput): BatchPayload!
  deleteManyFrenchVerbs(where: FrenchVerbWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  dailyTargets(where: DailyTargetWhereInput, orderBy: DailyTargetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DailyTarget]!
  bestStreaks(where: BestStreakWhereInput, orderBy: BestStreakOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BestStreak]!
  logs(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Log]!
  feedbacks(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback]!
  settings(where: SettingWhereInput, orderBy: SettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Setting]!
  frenchSettings(where: FrenchSettingWhereInput, orderBy: FrenchSettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FrenchSetting]!
  verbs(where: VerbWhereInput, orderBy: VerbOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Verb]!
  frenchVerbs(where: FrenchVerbWhereInput, orderBy: FrenchVerbOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FrenchVerb]!
  user(where: UserWhereUniqueInput!): User
  dailyTarget(where: DailyTargetWhereUniqueInput!): DailyTarget
  bestStreak(where: BestStreakWhereUniqueInput!): BestStreak
  log(where: LogWhereUniqueInput!): Log
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  setting(where: SettingWhereUniqueInput!): Setting
  frenchSetting(where: FrenchSettingWhereUniqueInput!): FrenchSetting
  verb(where: VerbWhereUniqueInput!): Verb
  frenchVerb(where: FrenchVerbWhereUniqueInput!): FrenchVerb
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  dailyTargetsConnection(where: DailyTargetWhereInput, orderBy: DailyTargetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DailyTargetConnection!
  bestStreaksConnection(where: BestStreakWhereInput, orderBy: BestStreakOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BestStreakConnection!
  logsConnection(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogConnection!
  feedbacksConnection(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedbackConnection!
  settingsConnection(where: SettingWhereInput, orderBy: SettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SettingConnection!
  frenchSettingsConnection(where: FrenchSettingWhereInput, orderBy: FrenchSettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FrenchSettingConnection!
  verbsConnection(where: VerbWhereInput, orderBy: VerbOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VerbConnection!
  frenchVerbsConnection(where: FrenchVerbWhereInput, orderBy: FrenchVerbOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FrenchVerbConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Setting implements Node {
  id: ID!
  difficulty: Int!
  latam: Boolean!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  presentPerfect: Boolean!
  futurePerfect: Boolean!
  pastPerfect: Boolean!
  conditionalPerfect: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  subjPresentPerfect: Boolean!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SettingEdge]!
  aggregate: AggregateSetting!
}

input SettingCreateInput {
  id: ID
  difficulty: Int!
  latam: Boolean!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  presentPerfect: Boolean!
  futurePerfect: Boolean!
  pastPerfect: Boolean!
  conditionalPerfect: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  subjPresentPerfect: Boolean!
  user: UserCreateOneWithoutSettingInput!
}

input SettingCreateOneWithoutUserInput {
  create: SettingCreateWithoutUserInput
  connect: SettingWhereUniqueInput
}

input SettingCreateWithoutUserInput {
  id: ID
  difficulty: Int!
  latam: Boolean!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  presentPerfect: Boolean!
  futurePerfect: Boolean!
  pastPerfect: Boolean!
  conditionalPerfect: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  subjPresentPerfect: Boolean!
}

"""An edge in a connection."""
type SettingEdge {
  """The item at the end of the edge."""
  node: Setting!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SettingOrderByInput {
  id_ASC
  id_DESC
  difficulty_ASC
  difficulty_DESC
  latam_ASC
  latam_DESC
  present_ASC
  present_DESC
  preterite_ASC
  preterite_DESC
  imperfect_ASC
  imperfect_DESC
  future_ASC
  future_DESC
  conditional_ASC
  conditional_DESC
  presentPerfect_ASC
  presentPerfect_DESC
  futurePerfect_ASC
  futurePerfect_DESC
  pastPerfect_ASC
  pastPerfect_DESC
  conditionalPerfect_ASC
  conditionalPerfect_DESC
  subjPresent_ASC
  subjPresent_DESC
  subjImperfect_ASC
  subjImperfect_DESC
  subjPresentPerfect_ASC
  subjPresentPerfect_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SettingPreviousValues {
  id: ID!
  difficulty: Int!
  latam: Boolean!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  presentPerfect: Boolean!
  futurePerfect: Boolean!
  pastPerfect: Boolean!
  conditionalPerfect: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  subjPresentPerfect: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SettingSubscriptionPayload {
  mutation: MutationType!
  node: Setting
  updatedFields: [String!]
  previousValues: SettingPreviousValues
}

input SettingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SettingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SettingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SettingSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SettingWhereInput
}

input SettingUpdateInput {
  difficulty: Int
  latam: Boolean
  present: Boolean
  preterite: Boolean
  imperfect: Boolean
  future: Boolean
  conditional: Boolean
  presentPerfect: Boolean
  futurePerfect: Boolean
  pastPerfect: Boolean
  conditionalPerfect: Boolean
  subjPresent: Boolean
  subjImperfect: Boolean
  subjPresentPerfect: Boolean
  user: UserUpdateOneRequiredWithoutSettingInput
}

input SettingUpdateManyMutationInput {
  difficulty: Int
  latam: Boolean
  present: Boolean
  preterite: Boolean
  imperfect: Boolean
  future: Boolean
  conditional: Boolean
  presentPerfect: Boolean
  futurePerfect: Boolean
  pastPerfect: Boolean
  conditionalPerfect: Boolean
  subjPresent: Boolean
  subjImperfect: Boolean
  subjPresentPerfect: Boolean
}

input SettingUpdateOneWithoutUserInput {
  create: SettingCreateWithoutUserInput
  connect: SettingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SettingUpdateWithoutUserDataInput
  upsert: SettingUpsertWithoutUserInput
}

input SettingUpdateWithoutUserDataInput {
  difficulty: Int
  latam: Boolean
  present: Boolean
  preterite: Boolean
  imperfect: Boolean
  future: Boolean
  conditional: Boolean
  presentPerfect: Boolean
  futurePerfect: Boolean
  pastPerfect: Boolean
  conditionalPerfect: Boolean
  subjPresent: Boolean
  subjImperfect: Boolean
  subjPresentPerfect: Boolean
}

input SettingUpsertWithoutUserInput {
  update: SettingUpdateWithoutUserDataInput!
  create: SettingCreateWithoutUserInput!
}

input SettingWhereInput {
  """Logical AND on all given filters."""
  AND: [SettingWhereInput!]

  """Logical OR on all given filters."""
  OR: [SettingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SettingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  difficulty: Int

  """All values that are not equal to given value."""
  difficulty_not: Int

  """All values that are contained in given list."""
  difficulty_in: [Int!]

  """All values that are not contained in given list."""
  difficulty_not_in: [Int!]

  """All values less than the given value."""
  difficulty_lt: Int

  """All values less than or equal the given value."""
  difficulty_lte: Int

  """All values greater than the given value."""
  difficulty_gt: Int

  """All values greater than or equal the given value."""
  difficulty_gte: Int
  latam: Boolean

  """All values that are not equal to given value."""
  latam_not: Boolean
  present: Boolean

  """All values that are not equal to given value."""
  present_not: Boolean
  preterite: Boolean

  """All values that are not equal to given value."""
  preterite_not: Boolean
  imperfect: Boolean

  """All values that are not equal to given value."""
  imperfect_not: Boolean
  future: Boolean

  """All values that are not equal to given value."""
  future_not: Boolean
  conditional: Boolean

  """All values that are not equal to given value."""
  conditional_not: Boolean
  presentPerfect: Boolean

  """All values that are not equal to given value."""
  presentPerfect_not: Boolean
  futurePerfect: Boolean

  """All values that are not equal to given value."""
  futurePerfect_not: Boolean
  pastPerfect: Boolean

  """All values that are not equal to given value."""
  pastPerfect_not: Boolean
  conditionalPerfect: Boolean

  """All values that are not equal to given value."""
  conditionalPerfect_not: Boolean
  subjPresent: Boolean

  """All values that are not equal to given value."""
  subjPresent_not: Boolean
  subjImperfect: Boolean

  """All values that are not equal to given value."""
  subjImperfect_not: Boolean
  subjPresentPerfect: Boolean

  """All values that are not equal to given value."""
  subjPresentPerfect_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input SettingWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  dailyTarget(where: DailyTargetSubscriptionWhereInput): DailyTargetSubscriptionPayload
  bestStreak(where: BestStreakSubscriptionWhereInput): BestStreakSubscriptionPayload
  log(where: LogSubscriptionWhereInput): LogSubscriptionPayload
  feedback(where: FeedbackSubscriptionWhereInput): FeedbackSubscriptionPayload
  setting(where: SettingSubscriptionWhereInput): SettingSubscriptionPayload
  frenchSetting(where: FrenchSettingSubscriptionWhereInput): FrenchSettingSubscriptionPayload
  verb(where: VerbSubscriptionWhereInput): VerbSubscriptionPayload
  frenchVerb(where: FrenchVerbSubscriptionWhereInput): FrenchVerbSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String
  name: String
  password: String
  createdAt: DateTime!
  updatedAt: DateTime!
  premium: Boolean!
  bestStreak: BestStreak
  dailyTarget: DailyTarget
  defaultLanguage: String
  logs(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Log!]
  feedbacks(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback!]
  stripeSubId: String
  stripeSource: String
  setting: Setting
  frenchSetting: FrenchSetting
  successfulPromo: Boolean
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String
  name: String
  password: String
  premium: Boolean!
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakCreateOneWithoutUserInput
  dailyTarget: DailyTargetCreateOneWithoutUserInput
  logs: LogCreateManyWithoutUserInput
  feedbacks: FeedbackCreateManyWithoutUserInput
  setting: SettingCreateOneWithoutUserInput
  frenchSetting: FrenchSettingCreateOneWithoutUserInput
}

input UserCreateOneWithoutBestStreakInput {
  create: UserCreateWithoutBestStreakInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDailyTargetInput {
  create: UserCreateWithoutDailyTargetInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFeedbacksInput {
  create: UserCreateWithoutFeedbacksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFrenchSettingInput {
  create: UserCreateWithoutFrenchSettingInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLogsInput {
  create: UserCreateWithoutLogsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSettingInput {
  create: UserCreateWithoutSettingInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBestStreakInput {
  id: ID
  email: String
  name: String
  password: String
  premium: Boolean!
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  dailyTarget: DailyTargetCreateOneWithoutUserInput
  logs: LogCreateManyWithoutUserInput
  feedbacks: FeedbackCreateManyWithoutUserInput
  setting: SettingCreateOneWithoutUserInput
  frenchSetting: FrenchSettingCreateOneWithoutUserInput
}

input UserCreateWithoutDailyTargetInput {
  id: ID
  email: String
  name: String
  password: String
  premium: Boolean!
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakCreateOneWithoutUserInput
  logs: LogCreateManyWithoutUserInput
  feedbacks: FeedbackCreateManyWithoutUserInput
  setting: SettingCreateOneWithoutUserInput
  frenchSetting: FrenchSettingCreateOneWithoutUserInput
}

input UserCreateWithoutFeedbacksInput {
  id: ID
  email: String
  name: String
  password: String
  premium: Boolean!
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakCreateOneWithoutUserInput
  dailyTarget: DailyTargetCreateOneWithoutUserInput
  logs: LogCreateManyWithoutUserInput
  setting: SettingCreateOneWithoutUserInput
  frenchSetting: FrenchSettingCreateOneWithoutUserInput
}

input UserCreateWithoutFrenchSettingInput {
  id: ID
  email: String
  name: String
  password: String
  premium: Boolean!
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakCreateOneWithoutUserInput
  dailyTarget: DailyTargetCreateOneWithoutUserInput
  logs: LogCreateManyWithoutUserInput
  feedbacks: FeedbackCreateManyWithoutUserInput
  setting: SettingCreateOneWithoutUserInput
}

input UserCreateWithoutLogsInput {
  id: ID
  email: String
  name: String
  password: String
  premium: Boolean!
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakCreateOneWithoutUserInput
  dailyTarget: DailyTargetCreateOneWithoutUserInput
  feedbacks: FeedbackCreateManyWithoutUserInput
  setting: SettingCreateOneWithoutUserInput
  frenchSetting: FrenchSettingCreateOneWithoutUserInput
}

input UserCreateWithoutSettingInput {
  id: ID
  email: String
  name: String
  password: String
  premium: Boolean!
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakCreateOneWithoutUserInput
  dailyTarget: DailyTargetCreateOneWithoutUserInput
  logs: LogCreateManyWithoutUserInput
  feedbacks: FeedbackCreateManyWithoutUserInput
  frenchSetting: FrenchSettingCreateOneWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  premium_ASC
  premium_DESC
  defaultLanguage_ASC
  defaultLanguage_DESC
  stripeSubId_ASC
  stripeSubId_DESC
  stripeSource_ASC
  stripeSource_DESC
  successfulPromo_ASC
  successfulPromo_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  name: String
  password: String
  createdAt: DateTime!
  updatedAt: DateTime!
  premium: Boolean!
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  premium: Boolean
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakUpdateOneWithoutUserInput
  dailyTarget: DailyTargetUpdateOneWithoutUserInput
  logs: LogUpdateManyWithoutUserInput
  feedbacks: FeedbackUpdateManyWithoutUserInput
  setting: SettingUpdateOneWithoutUserInput
  frenchSetting: FrenchSettingUpdateOneWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  premium: Boolean
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
}

input UserUpdateOneRequiredWithoutFrenchSettingInput {
  create: UserCreateWithoutFrenchSettingInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutFrenchSettingDataInput
  upsert: UserUpsertWithoutFrenchSettingInput
}

input UserUpdateOneRequiredWithoutSettingInput {
  create: UserCreateWithoutSettingInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSettingDataInput
  upsert: UserUpsertWithoutSettingInput
}

input UserUpdateOneWithoutBestStreakInput {
  create: UserCreateWithoutBestStreakInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutBestStreakDataInput
  upsert: UserUpsertWithoutBestStreakInput
}

input UserUpdateOneWithoutDailyTargetInput {
  create: UserCreateWithoutDailyTargetInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutDailyTargetDataInput
  upsert: UserUpsertWithoutDailyTargetInput
}

input UserUpdateOneWithoutFeedbacksInput {
  create: UserCreateWithoutFeedbacksInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutFeedbacksDataInput
  upsert: UserUpsertWithoutFeedbacksInput
}

input UserUpdateOneWithoutLogsInput {
  create: UserCreateWithoutLogsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLogsDataInput
  upsert: UserUpsertWithoutLogsInput
}

input UserUpdateWithoutBestStreakDataInput {
  email: String
  name: String
  password: String
  premium: Boolean
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  dailyTarget: DailyTargetUpdateOneWithoutUserInput
  logs: LogUpdateManyWithoutUserInput
  feedbacks: FeedbackUpdateManyWithoutUserInput
  setting: SettingUpdateOneWithoutUserInput
  frenchSetting: FrenchSettingUpdateOneWithoutUserInput
}

input UserUpdateWithoutDailyTargetDataInput {
  email: String
  name: String
  password: String
  premium: Boolean
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakUpdateOneWithoutUserInput
  logs: LogUpdateManyWithoutUserInput
  feedbacks: FeedbackUpdateManyWithoutUserInput
  setting: SettingUpdateOneWithoutUserInput
  frenchSetting: FrenchSettingUpdateOneWithoutUserInput
}

input UserUpdateWithoutFeedbacksDataInput {
  email: String
  name: String
  password: String
  premium: Boolean
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakUpdateOneWithoutUserInput
  dailyTarget: DailyTargetUpdateOneWithoutUserInput
  logs: LogUpdateManyWithoutUserInput
  setting: SettingUpdateOneWithoutUserInput
  frenchSetting: FrenchSettingUpdateOneWithoutUserInput
}

input UserUpdateWithoutFrenchSettingDataInput {
  email: String
  name: String
  password: String
  premium: Boolean
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakUpdateOneWithoutUserInput
  dailyTarget: DailyTargetUpdateOneWithoutUserInput
  logs: LogUpdateManyWithoutUserInput
  feedbacks: FeedbackUpdateManyWithoutUserInput
  setting: SettingUpdateOneWithoutUserInput
}

input UserUpdateWithoutLogsDataInput {
  email: String
  name: String
  password: String
  premium: Boolean
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakUpdateOneWithoutUserInput
  dailyTarget: DailyTargetUpdateOneWithoutUserInput
  feedbacks: FeedbackUpdateManyWithoutUserInput
  setting: SettingUpdateOneWithoutUserInput
  frenchSetting: FrenchSettingUpdateOneWithoutUserInput
}

input UserUpdateWithoutSettingDataInput {
  email: String
  name: String
  password: String
  premium: Boolean
  defaultLanguage: String
  stripeSubId: String
  stripeSource: String
  successfulPromo: Boolean
  bestStreak: BestStreakUpdateOneWithoutUserInput
  dailyTarget: DailyTargetUpdateOneWithoutUserInput
  logs: LogUpdateManyWithoutUserInput
  feedbacks: FeedbackUpdateManyWithoutUserInput
  frenchSetting: FrenchSettingUpdateOneWithoutUserInput
}

input UserUpsertWithoutBestStreakInput {
  update: UserUpdateWithoutBestStreakDataInput!
  create: UserCreateWithoutBestStreakInput!
}

input UserUpsertWithoutDailyTargetInput {
  update: UserUpdateWithoutDailyTargetDataInput!
  create: UserCreateWithoutDailyTargetInput!
}

input UserUpsertWithoutFeedbacksInput {
  update: UserUpdateWithoutFeedbacksDataInput!
  create: UserCreateWithoutFeedbacksInput!
}

input UserUpsertWithoutFrenchSettingInput {
  update: UserUpdateWithoutFrenchSettingDataInput!
  create: UserCreateWithoutFrenchSettingInput!
}

input UserUpsertWithoutLogsInput {
  update: UserUpdateWithoutLogsDataInput!
  create: UserCreateWithoutLogsInput!
}

input UserUpsertWithoutSettingInput {
  update: UserUpdateWithoutSettingDataInput!
  create: UserCreateWithoutSettingInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  premium: Boolean

  """All values that are not equal to given value."""
  premium_not: Boolean
  defaultLanguage: String

  """All values that are not equal to given value."""
  defaultLanguage_not: String

  """All values that are contained in given list."""
  defaultLanguage_in: [String!]

  """All values that are not contained in given list."""
  defaultLanguage_not_in: [String!]

  """All values less than the given value."""
  defaultLanguage_lt: String

  """All values less than or equal the given value."""
  defaultLanguage_lte: String

  """All values greater than the given value."""
  defaultLanguage_gt: String

  """All values greater than or equal the given value."""
  defaultLanguage_gte: String

  """All values containing the given string."""
  defaultLanguage_contains: String

  """All values not containing the given string."""
  defaultLanguage_not_contains: String

  """All values starting with the given string."""
  defaultLanguage_starts_with: String

  """All values not starting with the given string."""
  defaultLanguage_not_starts_with: String

  """All values ending with the given string."""
  defaultLanguage_ends_with: String

  """All values not ending with the given string."""
  defaultLanguage_not_ends_with: String
  stripeSubId: String

  """All values that are not equal to given value."""
  stripeSubId_not: String

  """All values that are contained in given list."""
  stripeSubId_in: [String!]

  """All values that are not contained in given list."""
  stripeSubId_not_in: [String!]

  """All values less than the given value."""
  stripeSubId_lt: String

  """All values less than or equal the given value."""
  stripeSubId_lte: String

  """All values greater than the given value."""
  stripeSubId_gt: String

  """All values greater than or equal the given value."""
  stripeSubId_gte: String

  """All values containing the given string."""
  stripeSubId_contains: String

  """All values not containing the given string."""
  stripeSubId_not_contains: String

  """All values starting with the given string."""
  stripeSubId_starts_with: String

  """All values not starting with the given string."""
  stripeSubId_not_starts_with: String

  """All values ending with the given string."""
  stripeSubId_ends_with: String

  """All values not ending with the given string."""
  stripeSubId_not_ends_with: String
  stripeSource: String

  """All values that are not equal to given value."""
  stripeSource_not: String

  """All values that are contained in given list."""
  stripeSource_in: [String!]

  """All values that are not contained in given list."""
  stripeSource_not_in: [String!]

  """All values less than the given value."""
  stripeSource_lt: String

  """All values less than or equal the given value."""
  stripeSource_lte: String

  """All values greater than the given value."""
  stripeSource_gt: String

  """All values greater than or equal the given value."""
  stripeSource_gte: String

  """All values containing the given string."""
  stripeSource_contains: String

  """All values not containing the given string."""
  stripeSource_not_contains: String

  """All values starting with the given string."""
  stripeSource_starts_with: String

  """All values not starting with the given string."""
  stripeSource_not_starts_with: String

  """All values ending with the given string."""
  stripeSource_ends_with: String

  """All values not ending with the given string."""
  stripeSource_not_ends_with: String
  successfulPromo: Boolean

  """All values that are not equal to given value."""
  successfulPromo_not: Boolean
  bestStreak: BestStreakWhereInput
  dailyTarget: DailyTargetWhereInput
  logs_every: LogWhereInput
  logs_some: LogWhereInput
  logs_none: LogWhereInput
  feedbacks_every: FeedbackWhereInput
  feedbacks_some: FeedbackWhereInput
  feedbacks_none: FeedbackWhereInput
  setting: SettingWhereInput
  frenchSetting: FrenchSettingWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Verb implements Node {
  id: ID!
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  gerundEnglish: String
  infinitive: String
  infinitiveEnglish: String
  mood: String
  moodEnglish: String
  pastparticiple: String
  pastparticipleEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

"""A connection to a list of items."""
type VerbConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VerbEdge]!
  aggregate: AggregateVerb!
}

input VerbCreateInput {
  id: ID
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  gerundEnglish: String
  infinitive: String
  infinitiveEnglish: String
  mood: String
  moodEnglish: String
  pastparticiple: String
  pastparticipleEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

"""An edge in a connection."""
type VerbEdge {
  """The item at the end of the edge."""
  node: Verb!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VerbOrderByInput {
  id_ASC
  id_DESC
  form1p_ASC
  form1p_DESC
  form1s_ASC
  form1s_DESC
  form2p_ASC
  form2p_DESC
  form2s_ASC
  form2s_DESC
  form3p_ASC
  form3p_DESC
  form3s_ASC
  form3s_DESC
  gerund_ASC
  gerund_DESC
  gerundEnglish_ASC
  gerundEnglish_DESC
  infinitive_ASC
  infinitive_DESC
  infinitiveEnglish_ASC
  infinitiveEnglish_DESC
  mood_ASC
  mood_DESC
  moodEnglish_ASC
  moodEnglish_DESC
  pastparticiple_ASC
  pastparticiple_DESC
  pastparticipleEnglish_ASC
  pastparticipleEnglish_DESC
  tense_ASC
  tense_DESC
  tenseEnglish_ASC
  tenseEnglish_DESC
  verbEnglish_ASC
  verbEnglish_DESC
}

type VerbPreviousValues {
  id: ID!
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  gerundEnglish: String
  infinitive: String
  infinitiveEnglish: String
  mood: String
  moodEnglish: String
  pastparticiple: String
  pastparticipleEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

type VerbSubscriptionPayload {
  mutation: MutationType!
  node: Verb
  updatedFields: [String!]
  previousValues: VerbPreviousValues
}

input VerbSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VerbSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VerbSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VerbSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VerbWhereInput
}

input VerbUpdateInput {
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  gerundEnglish: String
  infinitive: String
  infinitiveEnglish: String
  mood: String
  moodEnglish: String
  pastparticiple: String
  pastparticipleEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

input VerbUpdateManyMutationInput {
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  gerundEnglish: String
  infinitive: String
  infinitiveEnglish: String
  mood: String
  moodEnglish: String
  pastparticiple: String
  pastparticipleEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

input VerbWhereInput {
  """Logical AND on all given filters."""
  AND: [VerbWhereInput!]

  """Logical OR on all given filters."""
  OR: [VerbWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VerbWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  form1p: String

  """All values that are not equal to given value."""
  form1p_not: String

  """All values that are contained in given list."""
  form1p_in: [String!]

  """All values that are not contained in given list."""
  form1p_not_in: [String!]

  """All values less than the given value."""
  form1p_lt: String

  """All values less than or equal the given value."""
  form1p_lte: String

  """All values greater than the given value."""
  form1p_gt: String

  """All values greater than or equal the given value."""
  form1p_gte: String

  """All values containing the given string."""
  form1p_contains: String

  """All values not containing the given string."""
  form1p_not_contains: String

  """All values starting with the given string."""
  form1p_starts_with: String

  """All values not starting with the given string."""
  form1p_not_starts_with: String

  """All values ending with the given string."""
  form1p_ends_with: String

  """All values not ending with the given string."""
  form1p_not_ends_with: String
  form1s: String

  """All values that are not equal to given value."""
  form1s_not: String

  """All values that are contained in given list."""
  form1s_in: [String!]

  """All values that are not contained in given list."""
  form1s_not_in: [String!]

  """All values less than the given value."""
  form1s_lt: String

  """All values less than or equal the given value."""
  form1s_lte: String

  """All values greater than the given value."""
  form1s_gt: String

  """All values greater than or equal the given value."""
  form1s_gte: String

  """All values containing the given string."""
  form1s_contains: String

  """All values not containing the given string."""
  form1s_not_contains: String

  """All values starting with the given string."""
  form1s_starts_with: String

  """All values not starting with the given string."""
  form1s_not_starts_with: String

  """All values ending with the given string."""
  form1s_ends_with: String

  """All values not ending with the given string."""
  form1s_not_ends_with: String
  form2p: String

  """All values that are not equal to given value."""
  form2p_not: String

  """All values that are contained in given list."""
  form2p_in: [String!]

  """All values that are not contained in given list."""
  form2p_not_in: [String!]

  """All values less than the given value."""
  form2p_lt: String

  """All values less than or equal the given value."""
  form2p_lte: String

  """All values greater than the given value."""
  form2p_gt: String

  """All values greater than or equal the given value."""
  form2p_gte: String

  """All values containing the given string."""
  form2p_contains: String

  """All values not containing the given string."""
  form2p_not_contains: String

  """All values starting with the given string."""
  form2p_starts_with: String

  """All values not starting with the given string."""
  form2p_not_starts_with: String

  """All values ending with the given string."""
  form2p_ends_with: String

  """All values not ending with the given string."""
  form2p_not_ends_with: String
  form2s: String

  """All values that are not equal to given value."""
  form2s_not: String

  """All values that are contained in given list."""
  form2s_in: [String!]

  """All values that are not contained in given list."""
  form2s_not_in: [String!]

  """All values less than the given value."""
  form2s_lt: String

  """All values less than or equal the given value."""
  form2s_lte: String

  """All values greater than the given value."""
  form2s_gt: String

  """All values greater than or equal the given value."""
  form2s_gte: String

  """All values containing the given string."""
  form2s_contains: String

  """All values not containing the given string."""
  form2s_not_contains: String

  """All values starting with the given string."""
  form2s_starts_with: String

  """All values not starting with the given string."""
  form2s_not_starts_with: String

  """All values ending with the given string."""
  form2s_ends_with: String

  """All values not ending with the given string."""
  form2s_not_ends_with: String
  form3p: String

  """All values that are not equal to given value."""
  form3p_not: String

  """All values that are contained in given list."""
  form3p_in: [String!]

  """All values that are not contained in given list."""
  form3p_not_in: [String!]

  """All values less than the given value."""
  form3p_lt: String

  """All values less than or equal the given value."""
  form3p_lte: String

  """All values greater than the given value."""
  form3p_gt: String

  """All values greater than or equal the given value."""
  form3p_gte: String

  """All values containing the given string."""
  form3p_contains: String

  """All values not containing the given string."""
  form3p_not_contains: String

  """All values starting with the given string."""
  form3p_starts_with: String

  """All values not starting with the given string."""
  form3p_not_starts_with: String

  """All values ending with the given string."""
  form3p_ends_with: String

  """All values not ending with the given string."""
  form3p_not_ends_with: String
  form3s: String

  """All values that are not equal to given value."""
  form3s_not: String

  """All values that are contained in given list."""
  form3s_in: [String!]

  """All values that are not contained in given list."""
  form3s_not_in: [String!]

  """All values less than the given value."""
  form3s_lt: String

  """All values less than or equal the given value."""
  form3s_lte: String

  """All values greater than the given value."""
  form3s_gt: String

  """All values greater than or equal the given value."""
  form3s_gte: String

  """All values containing the given string."""
  form3s_contains: String

  """All values not containing the given string."""
  form3s_not_contains: String

  """All values starting with the given string."""
  form3s_starts_with: String

  """All values not starting with the given string."""
  form3s_not_starts_with: String

  """All values ending with the given string."""
  form3s_ends_with: String

  """All values not ending with the given string."""
  form3s_not_ends_with: String
  gerund: String

  """All values that are not equal to given value."""
  gerund_not: String

  """All values that are contained in given list."""
  gerund_in: [String!]

  """All values that are not contained in given list."""
  gerund_not_in: [String!]

  """All values less than the given value."""
  gerund_lt: String

  """All values less than or equal the given value."""
  gerund_lte: String

  """All values greater than the given value."""
  gerund_gt: String

  """All values greater than or equal the given value."""
  gerund_gte: String

  """All values containing the given string."""
  gerund_contains: String

  """All values not containing the given string."""
  gerund_not_contains: String

  """All values starting with the given string."""
  gerund_starts_with: String

  """All values not starting with the given string."""
  gerund_not_starts_with: String

  """All values ending with the given string."""
  gerund_ends_with: String

  """All values not ending with the given string."""
  gerund_not_ends_with: String
  gerundEnglish: String

  """All values that are not equal to given value."""
  gerundEnglish_not: String

  """All values that are contained in given list."""
  gerundEnglish_in: [String!]

  """All values that are not contained in given list."""
  gerundEnglish_not_in: [String!]

  """All values less than the given value."""
  gerundEnglish_lt: String

  """All values less than or equal the given value."""
  gerundEnglish_lte: String

  """All values greater than the given value."""
  gerundEnglish_gt: String

  """All values greater than or equal the given value."""
  gerundEnglish_gte: String

  """All values containing the given string."""
  gerundEnglish_contains: String

  """All values not containing the given string."""
  gerundEnglish_not_contains: String

  """All values starting with the given string."""
  gerundEnglish_starts_with: String

  """All values not starting with the given string."""
  gerundEnglish_not_starts_with: String

  """All values ending with the given string."""
  gerundEnglish_ends_with: String

  """All values not ending with the given string."""
  gerundEnglish_not_ends_with: String
  infinitive: String

  """All values that are not equal to given value."""
  infinitive_not: String

  """All values that are contained in given list."""
  infinitive_in: [String!]

  """All values that are not contained in given list."""
  infinitive_not_in: [String!]

  """All values less than the given value."""
  infinitive_lt: String

  """All values less than or equal the given value."""
  infinitive_lte: String

  """All values greater than the given value."""
  infinitive_gt: String

  """All values greater than or equal the given value."""
  infinitive_gte: String

  """All values containing the given string."""
  infinitive_contains: String

  """All values not containing the given string."""
  infinitive_not_contains: String

  """All values starting with the given string."""
  infinitive_starts_with: String

  """All values not starting with the given string."""
  infinitive_not_starts_with: String

  """All values ending with the given string."""
  infinitive_ends_with: String

  """All values not ending with the given string."""
  infinitive_not_ends_with: String
  infinitiveEnglish: String

  """All values that are not equal to given value."""
  infinitiveEnglish_not: String

  """All values that are contained in given list."""
  infinitiveEnglish_in: [String!]

  """All values that are not contained in given list."""
  infinitiveEnglish_not_in: [String!]

  """All values less than the given value."""
  infinitiveEnglish_lt: String

  """All values less than or equal the given value."""
  infinitiveEnglish_lte: String

  """All values greater than the given value."""
  infinitiveEnglish_gt: String

  """All values greater than or equal the given value."""
  infinitiveEnglish_gte: String

  """All values containing the given string."""
  infinitiveEnglish_contains: String

  """All values not containing the given string."""
  infinitiveEnglish_not_contains: String

  """All values starting with the given string."""
  infinitiveEnglish_starts_with: String

  """All values not starting with the given string."""
  infinitiveEnglish_not_starts_with: String

  """All values ending with the given string."""
  infinitiveEnglish_ends_with: String

  """All values not ending with the given string."""
  infinitiveEnglish_not_ends_with: String
  mood: String

  """All values that are not equal to given value."""
  mood_not: String

  """All values that are contained in given list."""
  mood_in: [String!]

  """All values that are not contained in given list."""
  mood_not_in: [String!]

  """All values less than the given value."""
  mood_lt: String

  """All values less than or equal the given value."""
  mood_lte: String

  """All values greater than the given value."""
  mood_gt: String

  """All values greater than or equal the given value."""
  mood_gte: String

  """All values containing the given string."""
  mood_contains: String

  """All values not containing the given string."""
  mood_not_contains: String

  """All values starting with the given string."""
  mood_starts_with: String

  """All values not starting with the given string."""
  mood_not_starts_with: String

  """All values ending with the given string."""
  mood_ends_with: String

  """All values not ending with the given string."""
  mood_not_ends_with: String
  moodEnglish: String

  """All values that are not equal to given value."""
  moodEnglish_not: String

  """All values that are contained in given list."""
  moodEnglish_in: [String!]

  """All values that are not contained in given list."""
  moodEnglish_not_in: [String!]

  """All values less than the given value."""
  moodEnglish_lt: String

  """All values less than or equal the given value."""
  moodEnglish_lte: String

  """All values greater than the given value."""
  moodEnglish_gt: String

  """All values greater than or equal the given value."""
  moodEnglish_gte: String

  """All values containing the given string."""
  moodEnglish_contains: String

  """All values not containing the given string."""
  moodEnglish_not_contains: String

  """All values starting with the given string."""
  moodEnglish_starts_with: String

  """All values not starting with the given string."""
  moodEnglish_not_starts_with: String

  """All values ending with the given string."""
  moodEnglish_ends_with: String

  """All values not ending with the given string."""
  moodEnglish_not_ends_with: String
  pastparticiple: String

  """All values that are not equal to given value."""
  pastparticiple_not: String

  """All values that are contained in given list."""
  pastparticiple_in: [String!]

  """All values that are not contained in given list."""
  pastparticiple_not_in: [String!]

  """All values less than the given value."""
  pastparticiple_lt: String

  """All values less than or equal the given value."""
  pastparticiple_lte: String

  """All values greater than the given value."""
  pastparticiple_gt: String

  """All values greater than or equal the given value."""
  pastparticiple_gte: String

  """All values containing the given string."""
  pastparticiple_contains: String

  """All values not containing the given string."""
  pastparticiple_not_contains: String

  """All values starting with the given string."""
  pastparticiple_starts_with: String

  """All values not starting with the given string."""
  pastparticiple_not_starts_with: String

  """All values ending with the given string."""
  pastparticiple_ends_with: String

  """All values not ending with the given string."""
  pastparticiple_not_ends_with: String
  pastparticipleEnglish: String

  """All values that are not equal to given value."""
  pastparticipleEnglish_not: String

  """All values that are contained in given list."""
  pastparticipleEnglish_in: [String!]

  """All values that are not contained in given list."""
  pastparticipleEnglish_not_in: [String!]

  """All values less than the given value."""
  pastparticipleEnglish_lt: String

  """All values less than or equal the given value."""
  pastparticipleEnglish_lte: String

  """All values greater than the given value."""
  pastparticipleEnglish_gt: String

  """All values greater than or equal the given value."""
  pastparticipleEnglish_gte: String

  """All values containing the given string."""
  pastparticipleEnglish_contains: String

  """All values not containing the given string."""
  pastparticipleEnglish_not_contains: String

  """All values starting with the given string."""
  pastparticipleEnglish_starts_with: String

  """All values not starting with the given string."""
  pastparticipleEnglish_not_starts_with: String

  """All values ending with the given string."""
  pastparticipleEnglish_ends_with: String

  """All values not ending with the given string."""
  pastparticipleEnglish_not_ends_with: String
  tense: String

  """All values that are not equal to given value."""
  tense_not: String

  """All values that are contained in given list."""
  tense_in: [String!]

  """All values that are not contained in given list."""
  tense_not_in: [String!]

  """All values less than the given value."""
  tense_lt: String

  """All values less than or equal the given value."""
  tense_lte: String

  """All values greater than the given value."""
  tense_gt: String

  """All values greater than or equal the given value."""
  tense_gte: String

  """All values containing the given string."""
  tense_contains: String

  """All values not containing the given string."""
  tense_not_contains: String

  """All values starting with the given string."""
  tense_starts_with: String

  """All values not starting with the given string."""
  tense_not_starts_with: String

  """All values ending with the given string."""
  tense_ends_with: String

  """All values not ending with the given string."""
  tense_not_ends_with: String
  tenseEnglish: String

  """All values that are not equal to given value."""
  tenseEnglish_not: String

  """All values that are contained in given list."""
  tenseEnglish_in: [String!]

  """All values that are not contained in given list."""
  tenseEnglish_not_in: [String!]

  """All values less than the given value."""
  tenseEnglish_lt: String

  """All values less than or equal the given value."""
  tenseEnglish_lte: String

  """All values greater than the given value."""
  tenseEnglish_gt: String

  """All values greater than or equal the given value."""
  tenseEnglish_gte: String

  """All values containing the given string."""
  tenseEnglish_contains: String

  """All values not containing the given string."""
  tenseEnglish_not_contains: String

  """All values starting with the given string."""
  tenseEnglish_starts_with: String

  """All values not starting with the given string."""
  tenseEnglish_not_starts_with: String

  """All values ending with the given string."""
  tenseEnglish_ends_with: String

  """All values not ending with the given string."""
  tenseEnglish_not_ends_with: String
  verbEnglish: String

  """All values that are not equal to given value."""
  verbEnglish_not: String

  """All values that are contained in given list."""
  verbEnglish_in: [String!]

  """All values that are not contained in given list."""
  verbEnglish_not_in: [String!]

  """All values less than the given value."""
  verbEnglish_lt: String

  """All values less than or equal the given value."""
  verbEnglish_lte: String

  """All values greater than the given value."""
  verbEnglish_gt: String

  """All values greater than or equal the given value."""
  verbEnglish_gte: String

  """All values containing the given string."""
  verbEnglish_contains: String

  """All values not containing the given string."""
  verbEnglish_not_contains: String

  """All values starting with the given string."""
  verbEnglish_starts_with: String

  """All values not starting with the given string."""
  verbEnglish_not_starts_with: String

  """All values ending with the given string."""
  verbEnglish_ends_with: String

  """All values not ending with the given string."""
  verbEnglish_not_ends_with: String
}

input VerbWhereUniqueInput {
  id: ID
}
