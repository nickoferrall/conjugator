type User {
  id: ID! @id
  email: String @unique
  name: String
  password: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  premium: Boolean!
  bestStreak: BestStreak
    @relation(link: TABLE, name: "BestStreakToUser", onDelete: CASCADE)
  dailyTarget: DailyTarget
    @relation(link: TABLE, name: "DailyTargetToUser", onDelete: CASCADE)
  defaultLanguage: String
  logs: [Log] @relation(name: "LogToUser", onDelete: CASCADE)
  feedbacks: [Feedback] @relation(name: "FeedbackToUser", onDelete: CASCADE)
  stripeSubId: String
  stripeSource: String
  setting: Setting
    @relation(link: TABLE, name: "SettingToUser", onDelete: CASCADE)
  frenchSetting: FrenchSetting
    @relation(link: TABLE, name: "FrenchSettingToUser", onDelete: CASCADE)
  successfulPromo: Boolean
}

type DailyTarget {
  id: ID! @id
  target: Int!
  user: User @relation(name: "DailyTargetToUser", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type BestStreak {
  id: ID! @id
  streak: Int!
  user: User @relation(name: "BestStreakToUser", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Log {
  id: ID! @id
  correct: Boolean!
  correctAnswer: String!
  tense: String!
  userAnswer: String!
  verbInfinitive: String!
  verbPerson: String!
  user: User @relation(name: "LogToUser", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Feedback {
  id: ID! @id
  email: String!
  user: User @relation(name: "FeedbackToUser", onDelete: CASCADE)
  text: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Setting {
  id: ID! @id
  difficulty: Int!
  latam: Boolean!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  presentPerfect: Boolean!
  futurePerfect: Boolean!
  pastPerfect: Boolean!
  conditionalPerfect: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  subjPresentPerfect: Boolean!
  user: User! @relation(name: "SettingToUser", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type FrenchSetting {
  id: ID! @id
  difficulty: Int!
  present: Boolean!
  preterite: Boolean!
  imperfect: Boolean!
  future: Boolean!
  conditional: Boolean!
  subjPresent: Boolean!
  subjImperfect: Boolean!
  user: User! @relation(name: "FrenchSettingToUser", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Verb {
  id: ID! @id
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  gerundEnglish: String
  infinitive: String
  infinitiveEnglish: String
  mood: String
  moodEnglish: String
  pastparticiple: String
  pastparticipleEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}

type FrenchVerb {
  id: ID! @id
  form1p: String
  form1s: String
  form2p: String
  form2s: String
  form3p: String
  form3s: String
  gerund: String
  infinitive: String
  moodEnglish: String
  tense: String
  tenseEnglish: String
  verbEnglish: String
}
